{
  "info": {
    "name": "SoftDesk Support API",
    "_postman_id": "b6b53e9a-9b0e-4c6e-a8b2-111111111111",
    "description": "Requêtes prêtes pour JWT + CRUD Projects/Issues/Comments/Contributors. Importez cette collection, puis exécutez Auth → Obtenir tokens (login).",
    "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
  },
  "auth": {
    "type": "bearer",
    "bearer": [
      { "key": "token", "value": "{{access_token}}", "type": "string" }
    ]
  },
  "variable": [
    { "key": "base_url", "value": "http://127.0.0.1:8000" },
    { "key": "access_token", "value": "" },
    { "key": "refresh_token", "value": "" },
    { "key": "project_id", "value": "" },
    { "key": "issue_id", "value": "" },
    { "key": "comment_id", "value": "" },
    { "key": "contributor_id", "value": "" }
  ],
  "item": [
    {
      "name": "Auth",
      "item": [
        {
          "name": "Signup (créer un utilisateur)",
          "request": {
            "method": "POST",
            "header": [{ "key": "Content-Type", "value": "application/json" }],
            "url": "{{base_url}}/api/signup/",
            "body": {
              "mode": "raw",
              "raw": "{\n  \"username\": \"admin\",\n  \"password\": \"admin\",\n  \"email\": \"admin@example.com\",\n  \"age\": 25,\n  \"can_be_contacted\": true,\n  \"can_data_be_shared\": false\n}"
            }
          }
        },
        {
          "name": "Obtenir tokens (login)",
          "request": {
            "method": "POST",
            "header": [{ "key": "Content-Type", "value": "application/json" }],
            "url": "{{base_url}}/api/token/",
            "body": { "mode": "raw", "raw": "{\n  \"username\": \"admin\",\n  \"password\": \"admin\"\n}" }
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "pm.test('Status 200', () => pm.response.code === 200);",
                  "const data = pm.response.json();",
                  "if (data.access) pm.collectionVariables.set('access_token', data.access);",
                  "if (data.refresh) pm.collectionVariables.set('refresh_token', data.refresh);"
                ]
              }
            }
          ]
        },
        {
          "name": "Refresh token",
          "request": {
            "method": "POST",
            "header": [{ "key": "Content-Type", "value": "application/json" }],
            "url": "{{base_url}}/api/token/refresh/",
            "body": { "mode": "raw", "raw": "{\n  \"refresh\": \"{{refresh_token}}\"\n}" }
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "pm.test('Status 200', () => pm.response.code === 200);",
                  "const data = pm.response.json();",
                  "if (data.access) pm.collectionVariables.set('access_token', data.access);"
                ]
              }
            }
          ]
        },
        {
          "name": "Me (profil)",
          "request": {
            "method": "GET",
            "header": [],
            "url": "{{base_url}}/api/me/"
          }
        }
      ]
    },
    {
      "name": "Projects",
      "item": [
        {
          "name": "Créer project",
          "request": {
            "method": "POST",
            "header": [{ "key": "Content-Type", "value": "application/json" }],
            "url": "{{base_url}}/api/projects/",
            "body": { "mode": "raw", "raw": "{\n  \"title\": \"Mon projet\",\n  \"description\": \"Démo\",\n  \"type\": \"Software\"\n}" }
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "pm.test('201 Created', () => pm.response.code === 201);",
                  "const data = pm.response.json();",
                  "if (data && data.id) pm.collectionVariables.set('project_id', data.id);"
                ]
              }
            }
          ]
        },
        {
          "name": "Lister projects",
          "request": { "method": "GET", "header": [], "url": "{{base_url}}/api/projects/" }
        },
        {
          "name": "Détail project",
          "request": { "method": "GET", "header": [], "url": "{{base_url}}/api/projects/{{project_id}}/" }
        },
        {
          "name": "Modifier project (PATCH)",
          "request": {
            "method": "PATCH",
            "header": [{ "key": "Content-Type", "value": "application/json" }],
            "url": "{{base_url}}/api/projects/{{project_id}}/",
            "body": { "mode": "raw", "raw": "{ \"description\": \"MAJ description\" }" }
          }
        },
        {
          "name": "Supprimer project",
          "request": { "method": "DELETE", "header": [], "url": "{{base_url}}/api/projects/{{project_id}}/" }
        }
      ]
    },
    {
      "name": "Contributors",
      "item": [
        {
          "name": "Ajouter contributor",
          "request": {
            "method": "POST",
            "header": [{ "key": "Content-Type", "value": "application/json" }],
            "url": "{{base_url}}/api/contributors/",
            "body": {
              "mode": "raw",
              "raw": "{\n  \"user\": 2,\n  \"project\": {{project_id}},\n  \"role\": \"CONTRIBUTOR\"\n}"
            }
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "pm.test('201 Created', () => pm.response.code === 201);",
                  "const data = pm.response.json();",
                  "if (data && data.id) pm.collectionVariables.set('contributor_id', data.id);"
                ]
              }
            }
          ]
        },
        {
          "name": "Lister contributors",
          "request": { "method": "GET", "header": [], "url": "{{base_url}}/api/contributors/" }
        },
        {
          "name": "Supprimer contributor",
          "request": { "method": "DELETE", "header": [], "url": "{{base_url}}/api/contributors/{{contributor_id}}/" }
        }
      ]
    },
    {
      "name": "Issues",
      "item": [
        {
          "name": "Créer issue",
          "request": {
            "method": "POST",
            "header": [{ "key": "Content-Type", "value": "application/json" }],
            "url": "{{base_url}}/api/issues/",
            "body": {
              "mode": "raw",
              "raw": "{\n  \"project\": {{project_id}},\n  \"name\": \"Bug A\",\n  \"description\": \"Détail\",\n  \"status\": \"IN_PROGRESS\"\n}"
            }
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "pm.test('201 Created', () => pm.response.code === 201);",
                  "const data = pm.response.json();",
                  "if (data && data.id) pm.collectionVariables.set('issue_id', data.id);"
                ]
              }
            }
          ]
        },
        {
          "name": "Lister issues",
          "request": { "method": "GET", "header": [], "url": "{{base_url}}/api/issues/" }
        },
        {
          "name": "Détail issue",
          "request": { "method": "GET", "header": [], "url": "{{base_url}}/api/issues/{{issue_id}}/" }
        },
        {
          "name": "Modifier issue (PATCH)",
          "request": {
            "method": "PATCH",
            "header": [{ "key": "Content-Type", "value": "application/json" }],
            "url": "{{base_url}}/api/issues/{{issue_id}}/",
            "body": { "mode": "raw", "raw": "{ \"status\": \"DONE\" }" }
          }
        },
        {
          "name": "Supprimer issue",
          "request": { "method": "DELETE", "header": [], "url": "{{base_url}}/api/issues/{{issue_id}}/" }
        }
      ]
    },
    {
      "name": "Comments",
      "item": [
        {
          "name": "Créer comment",
          "request": {
            "method": "POST",
            "header": [{ "key": "Content-Type", "value": "application/json" }],
            "url": "{{base_url}}/api/comments/",
            "body": {
              "mode": "raw",
              "raw": "{\n  \"issue\": {{issue_id}},\n  \"description\": \"Premier commentaire\"\n}"
            }
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "pm.test('201 Created', () => pm.response.code === 201);",
                  "const data = pm.response.json();",
                  "if (data && data.id) pm.collectionVariables.set('comment_id', data.id);"
                ]
              }
            }
          ]
        },
        {
          "name": "Lister comments",
          "request": { "method": "GET", "header": [], "url": "{{base_url}}/api/comments/" }
        },
        {
          "name": "Détail comment",
          "request": { "method": "GET", "header": [], "url": "{{base_url}}/api/comments/{{comment_id}}/" }
        },
        {
          "name": "Modifier comment (PATCH)",
          "request": {
            "method": "PATCH",
            "header": [{ "key": "Content-Type", "value": "application/json" }],
            "url": "{{base_url}}/api/comments/{{comment_id}}/",
            "body": { "mode": "raw", "raw": "{ \"description\": \"Commentaire mis à jour\" }" }
          }
        },
        {
          "name": "Supprimer comment",
          "request": { "method": "DELETE", "header": [], "url": "{{base_url}}/api/comments/{{comment_id}}/" }
        }
      ]
    }
  ]
}
